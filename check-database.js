const { PrismaClient } = require('@prisma/client')

async function checkDatabase() {
  const prisma = new PrismaClient()
  
  try {
    console.log('üîç Verificando estrutura do banco de dados...')
    
    // Testar conex√£o
    await prisma.$connect()
    console.log('‚úÖ Conex√£o estabelecida')
    
    // Verificar tabelas principais
    console.log('\nüìä Verificando tabelas:')
    
    try {
      const usuarios = await prisma.usuario.count()
      console.log(`‚úÖ usuarios: ${usuarios} registros`)
    } catch (e) {
      console.log(`‚ùå usuarios: ${e.message}`)
    }
    
    try {
      const emprestimos = await prisma.emprestimo.count()
      console.log(`‚úÖ emprestimos: ${emprestimos} registros`)
    } catch (e) {
      console.log(`‚ùå emprestimos: ${e.message}`)
    }
    
    try {
      const investimentos = await prisma.investimento.count()
      console.log(`‚úÖ investimentos: ${investimentos} registros`)
    } catch (e) {
      console.log(`‚ùå investimentos: ${e.message}`)
    }
    
    try {
      const perfilTomador = await prisma.perfilTomador.count()
      console.log(`‚úÖ perfil_tomador: ${perfilTomador} registros`)
    } catch (e) {
      console.log(`‚ùå perfil_tomador: ${e.message}`)
    }
    
    try {
      const perfilInvestidor = await prisma.perfilInvestidor.count()
      console.log(`‚úÖ perfil_investidor: ${perfilInvestidor} registros`)
    } catch (e) {
      console.log(`‚ùå perfil_investidor: ${e.message}`)
    }
    
    try {
      const parcelas = await prisma.parcela.count()
      console.log(`‚úÖ parcelas: ${parcelas} registros`)
    } catch (e) {
      console.log(`‚ùå parcelas: ${e.message}`)
    }
    
    try {
      const notificacoes = await prisma.notificacao.count()
      console.log(`‚úÖ notificacoes: ${notificacoes} registros`)
    } catch (e) {
      console.log(`‚ùå notificacoes: ${e.message}`)
    }
    
    // Testar cria√ß√£o de usu√°rio
    console.log('\nüß™ Testando cria√ß√£o de usu√°rio...')
    try {
      const testUser = await prisma.usuario.create({
        data: {
          nome: 'Teste',
          sobrenome: 'Conex√£o',
          email: 'teste-conexao-' + Date.now() + '@teste.com',
          senhaHash: 'hash-teste',
          cpf: '99999999999',
          telefone: '11999999999',
          tipoPerfil: 'TOMADOR'
        }
      })
      
      console.log('‚úÖ Usu√°rio criado:', testUser.id)
      
      // Limpar
      await prisma.usuario.delete({
        where: { id: testUser.id }
      })
      
      console.log('‚úÖ Usu√°rio removido')
      
    } catch (e) {
      console.log(`‚ùå Erro ao criar usu√°rio: ${e.message}`)
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message)
  } finally {
    await prisma.$disconnect()
  }
}

checkDatabase()
