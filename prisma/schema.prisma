// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                String   @id @default(cuid())
  email             String   @unique
  senhaHash         String   @map("senha_hash")
  cpf               String   @unique
  nome              String
  sobrenome         String
  telefone          String?
  tipoPerfil        TipoPerfil @map("tipo_perfil")
  statusKyc         StatusKyc @default(PENDENTE) @map("status_kyc")
  fotoUsuarioUrl    String?  @map("foto_usuario_url")
  fotoDocumentoUrl  String?  @map("foto_documento_url")
  criadoEm          DateTime @default(now()) @map("criado_em")
  atualizadoEm      DateTime @updatedAt @map("atualizado_em")

  // Relacionamentos
  perfilTomador     PerfilTomador?
  perfilInvestidor  PerfilInvestidor?
  emprestimos       Emprestimo[]
  investimentos     Investimento[]
  notificacoes      Notificacao[]
  logsAcoes         LogAcao[]
  historicoScores   HistoricoScore[]
  contratosInvestidor ContratoCcb[] @relation("ContratoInvestidor")
  contratosTomador   ContratoCcb[] @relation("ContratoTomador")
  repasses          Repasse[]

  @@map("usuarios")
}

model PerfilTomador {
  usuarioId       String  @id @map("usuario_id")
  scoreCredito    Int?    @map("score_credito")
  limiteCredito   Decimal? @map("limite_credito") 
  openFinanceFake Json?   @map("open_finance_fake")
  criadoEm        DateTime @default(now()) @map("criado_em")

  // Relacionamentos
  usuario         Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("perfil_tomador")
}

model PerfilInvestidor {
  usuarioId         String  @id @map("usuario_id")
  rendaMensal       Decimal? @map("renda_mensal") 
  patrimonioTotal   Decimal? @map("patrimonio_total") 
  perfilRisco       PerfilRisco? @map("perfil_risco")
  limiteInvestimento Decimal? @map("limite_investimento") 
  openFinanceFake   Json?   @map("open_finance_fake")
  criadoEm          DateTime @default(now()) @map("criado_em")

  // Relacionamentos
  usuario           Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("perfil_investidor")
}

model Emprestimo {
  id            String      @id @default(cuid())
  tomadorId     String      @map("tomador_id")
  status        StatusEmprestimo @default(PENDENTE)
  valorSolicitado Decimal   @map("valor_solicitado") 
  valorAprovado Decimal?    @map("valor_aprovado") 
  taxaJuros     Decimal?    @map("taxa_juros") 
  prazoMeses    Int         @map("prazo_meses")
  finalidade    String?
  financiadoEm  DateTime?   @map("financiado_em")
  criadoEm      DateTime    @default(now()) @map("criado_em")
  atualizadoEm  DateTime    @updatedAt @map("atualizado_em")

  // Relacionamentos
  tomador       Usuario     @relation(fields: [tomadorId], references: [id], onDelete: Cascade)
  investimento  Investimento?
  contratoCcb   ContratoCcb?
  parcelas      Parcela[]

  @@map("emprestimos")
}

model Investimento {
  id            String      @id @default(cuid())
  emprestimoId  String      @unique @map("emprestimo_id")
  investidorId  String      @map("investidor_id")
  valorInvestido Decimal    @map("valor_investido") 
  status        StatusInvestimento @default(ATIVO)
  criadoEm      DateTime    @default(now()) @map("criado_em")

  // Relacionamentos
  emprestimo    Emprestimo  @relation(fields: [emprestimoId], references: [id], onDelete: Cascade)
  investidor    Usuario     @relation(fields: [investidorId], references: [id], onDelete: Cascade)

  @@map("investimentos")
}

model ContratoCcb {
  id                String    @id @default(cuid())
  emprestimoId      String    @unique @map("emprestimo_id")
  investidorId      String    @map("investidor_id")
  tomadorId         String    @map("tomador_id")
  hashContrato      String?   @map("hash_contrato")
  pdfUrl            String?   @map("pdf_url")
  assinadoTomador   Boolean   @default(false) @map("assinado_tomador")
  assinadoInvestidor Boolean  @default(false) @map("assinado_investidor")
  executadoEm       DateTime? @map("executado_em")
  criadoEm          DateTime  @default(now()) @map("criado_em")

  // Relacionamentos
  emprestimo        Emprestimo @relation(fields: [emprestimoId], references: [id], onDelete: Cascade)
  investidor        Usuario    @relation("ContratoInvestidor", fields: [investidorId], references: [id], onDelete: Cascade)
  tomador           Usuario    @relation("ContratoTomador", fields: [tomadorId], references: [id], onDelete: Cascade)

  @@map("contratos_ccb")
}

model Parcela {
  id            String      @id @default(cuid())
  emprestimoId  String      @map("emprestimo_id")
  dataVencimento DateTime   @map("data_vencimento")
  valorParcela  Decimal     @map("valor_parcela")
  pagoEm        DateTime?   @map("pago_em")
  status        StatusParcela @default(PENDENTE)
  criadoEm      DateTime    @default(now()) @map("criado_em")

  // Relacionamentos
  emprestimo    Emprestimo  @relation(fields: [emprestimoId], references: [id], onDelete: Cascade)
  repasses      Repasse[]

  @@map("parcelas")
}

model Repasse {
  id              String    @id @default(cuid())
  parcelaId       String    @map("parcela_id")
  investidorId    String    @map("investidor_id")
  valorRepassado  Decimal   @map("valor_repassado") 
  taxaPlataforma  Decimal   @default(0.00) @map("taxa_plataforma") 
  dataRepassado   DateTime? @map("data_repassado")
  criadoEm        DateTime  @default(now()) @map("criado_em")

  // Relacionamentos
  parcela         Parcela   @relation(fields: [parcelaId], references: [id], onDelete: Cascade)
  investidor      Usuario   @relation(fields: [investidorId], references: [id], onDelete: Cascade)

  @@map("repasses")
}

model LogAcao {
  id          String    @id @default(cuid())
  usuarioId   String?   @map("usuario_id")
  acao        String
  descricao   String?
  ipOrigem    String?   @map("ip_origem")
  criadoEm    DateTime  @default(now()) @map("criado_em")

  // Relacionamentos
  usuario     Usuario?  @relation(fields: [usuarioId], references: [id], onDelete: SetNull)

  @@map("logs_acoes")
}

model HistoricoScore {
  id            String    @id @default(cuid())
  usuarioId     String    @map("usuario_id")
  score         Int
  fonteCalculo  String    @map("fonte_calculo")
  criadoEm      DateTime  @default(now()) @map("criado_em")

  // Relacionamentos
  usuario       Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("historico_scores")
}

model Notificacao {
  id              String   @id @default(cuid())
  usuarioId       String   @map("usuario_id")
  titulo          String
  mensagem        String?
  lida            Boolean  @default(false)
  tipo            TipoNotificacao
  linkRelacionado String?  @map("link_relacionado")
  criadoEm        DateTime @default(now()) @map("criado_em")

  // Relacionamentos
  usuario         Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("notificacoes")
}

// Enums
enum TipoPerfil {
  TOMADOR
  INVESTIDOR
}

enum StatusKyc {
  PENDENTE
  APROVADO
  REJEITADO
}

enum PerfilRisco {
  CONSERVADOR
  MODERADO
  AGRESSIVO
}

enum StatusEmprestimo {
  PENDENTE
  FINANCIADO
  ATIVO
  CONCLUIDO
  INADIMPLENTE
}

enum StatusInvestimento {
  ATIVO
  CONCLUIDO
}

enum StatusParcela {
  PENDENTE
  PAGO
  ATRASADO
}

enum TipoNotificacao {
  PAGAMENTO_RECEBIDO
  EMPRESTIMO_FINANCIADO
  LEMBRETE_VENCIMENTO
  CONTRATO_ASSINADO
  KYC_APROVADO
  KYC_REJEITADO
  GERAL
}